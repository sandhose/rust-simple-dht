.\" Automatically generated by Pandoc 2.0.4
.\"
.TH "SIMPLE_DHT" "1" "D\[u00E9]cembre 2017" "" ""
.hy
.SH NOM
.PP
simple_dht \[en] Impl\[u00E9]mentation d'une table de hashage distribu\[u00E9]e en
Rust
.SH SYNOPSIS
.PP
\f[B]simple_dht\f[] [\f[B]\-h\f[]] <commande>
.SH DESCRIPTION
.PP
\f[B]simple_dht\f[] est une table de hashage distribu\[u00E9]e simple \[u00E9]crite en
Rust, \[u00E0] base d'E/S asynchrones (via tokio\-rs).
Plusieurs serveurs peuvent s'\[u00E9]changer des hash avec leur contenu.
Un hash envoy\[u00E9] \[u00E0] un serveur sera propag\[u00E9] dans tout le r\[u00E9]seau.
.PP
Cet utilitaire comporte \[u00E9]galement un client, qui permet d'envoyer des
messages \[u00E0] un serveur.
.PP
Compil\[u00E9] et test\[u00E9] avec Rust 1.22.1 sur macOS.
.SH OPTIONS G\[u00C9]N\[u00C9]RALES
.TP
.B \f[B]\-h\f[], \f[B]\[en]help\f[]
Affiche le message d'aide
.RS
.RE
.SH COMMANDES
.TP
.B \f[B]server [hote:port]\f[]
Lance un serveur sur [hote:port] (par d\[u00E9]faut: \f[I][::]:0\f[])
.RS
.RE
.TP
.B \f[B]client <hote:port> <commande>\f[]
Ex\[u00E9]cute une commande commandes sur un serveur distant
.RS
.RE
.TP
.B \f[B]help [sous\-commande]\f[]
Affiche l'aide d'une sous\-commande
.RS
.RE
.SS SOUS\-COMMANDE CLIENT
.PP
Ces commandes sont aussi utilisables dans le mode interactif du serveur.
.TP
.B \f[B]get <hash>\f[]
R\[u00E9]cup\[u00E8]re le contenu d'un hash
.RS
.RE
.TP
.B \f[B]put <hash> <contenu>\f[]
Envoie un hash
.RS
.RE
.TP
.B \f[B]discover <hote:port>\f[]
Signale un nouveau pair au serveur distant
.RS
.RE
.SH FONCTIONNEMENT DU PROTOCOLE
.PP
Un serveur poss\[u00E8]de un \[u00E9]tat, comportant la liste des hash connus, la
liste des pairs connus et une liste de requ\[u00EA]tes en attente.
Lorsqu'il re\[u00E7]oit un message quelconque d'une source, il ajoute cette
source \[u00E0] la liste des pairs connus (qu'elle soit un serveur ou un
client).
Toutes les secondes, le serveur envoie un message \f[C]KeepAlive\f[] \[u00E0]
tous les pairs connus.
Un pair n'ayant pas donn\[u00E9] de signe de vie depuis un certain temps est
consid\[u00E9]r\[u00E9] comme d\[u00E9]pass\[u00E9], et est supprim\[u00E9] de cette liste.
.PP
Lorsqu'un serveur re\[u00E7]ois un message \f[C]Get(hash)\f[], il l'ajoute \[u00E0] la
liste des requ\[u00EA]tes en attente.
Il va regarder r\[u00E9]guli\[u00E8]rement si avec la liste des hash qu'il conna\[u00EE]t, il
peut r\[u00E9]soudre une des requ\[u00EA]tes en attente.
Si c'est le cas, il envoie un message \f[C]Put(hash)\f[] \[u00E0] celui qui a
demand\[u00E9] le hash.
.PP
Lorsqu'un serveur re\[u00E7]ois un message \f[C]Put(hash,\ _)\f[], il ajoute le
hash \[u00E0] sa liste des hash connus, et envoie un message
\f[C]IHave(hash)\f[] \[u00E0] tous ses pairs connus.
.PP
Lorsqu'un serveur re\[u00E7]ois un message \f[C]IHave(hash)\f[], il v\[u00E9]rifie
s'il n'a pas d\[u00E9]j\[u00E0] le hash annonc\[u00E9], et si ce n'est pas le cas, il le
demande au pair distant en envoyant un message \f[C]Get(hash)\f[].
.PP
Lorsqu'un serveur re\[u00E7]ois un message \f[C]Discover(pair)\f[], il ajoute
le pair \[u00E0] la liste des pairs connus.
\[u00C0] la boucle suivante, il enverra donc un \f[C]KeepAlive\f[] au pair tout
juste d\[u00E9]couvert, et \[u00E9]tablira ainsi la connexion.
.PP
En pratique, l'\[u00E9]tat est une structure partag\[u00E9]e par plusieurs agents:
plusieurs sockets UDP et l'invite de commande interactive.
Rien n'emp\[u00EA]che de faire tourner ces agents dans des threads diff\[u00E9]rents,
ou d'impl\[u00E9]menter relativement rapidement le protocole par dessus une
autre couche de transport (TCP).
.SH BUGS
.PP
Beaucoup d'erreurs ne sont pas attrap\[u00E9]es proprement (mais il ne manque
pas grand chose pour qu'elles le soit).
Un message invalide arr\[u00EA]tera le serveur, tout comme la tentative d'envoi
d'un paquet sur une destination non joignable.
.PP
L'invite de commande interactive manque de finition.
Si un message appara\[u00EE]t dans la console entre\-temps, l'invite de
commande ne s'affiche plus forc\[u00E9]ment correctement.
.SH AUTHORS
Quentin Gliech <quentin.gliech@etu.unistra.fr>.

